apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: oauth2-proxy
  namespace: oauth2-proxy
spec:
  chart:
    spec:
      chart: oauth2-proxy
      sourceRef:
        kind: HelmRepository
        name: bitnami
        namespace: flux-system
  interval: 1m0s
  releaseName: oauth2-proxy
  targetNamespace: oauth2-proxy
  values:
    ingress:
      enabled: false
      ingressClassName: ""
      hostname: oaut2-proxy.local
      path: /
      annotations: { }
      tls: false
      certManager: false
      selfSigned: false

    configuration:
      ## @param configuration.clientID OAuth client ID
      ##
      clientID: "istio-mlops"
      ## @param configuration.clientSecret OAuth client secret
      ##
      clientSecret: "iuq9NKgODCkn5VSwDTe7LamybKrzf2zw"
      ## Create a new secret with the following command openssl rand -base64 32 | head -c 32 | base64
      ## Use an existing secret for OAuth2 credentials (see secret.yaml for required fields)
      ##
      ## @param configuration.cookieSecret OAuth cookie secret
      ##
      cookieSecret: "MEV5RFgyK2xNRFpNb0l4anJTWGs5TTFoMmptMnhqS1E="
      ## @param configuration.existingSecret Secret with the client ID, secret and cookie secret
      ##
      existingSecret: ""
      ## e.g:
      ## google:
      ##   adminEmail: xxxx
      ##   serviceAccountJson: xxxx
      ##   existingSecret: google-secret
      ## Alternatively, use an existing secret (see secret-google.yaml for required fields)
      ##
      ## @param configuration.google.enabled Enable Google service account
      ## @param configuration.google.adminEmail Google admin email
      ## @param configuration.google.googleGroup Restrict logins to members of this google group
      ## @param configuration.google.serviceAccountJson Google Service account JSON
      ## @param configuration.google.existingSecret Existing secret containing Google Service Account
      ##
      google:
        enabled: false
        adminEmail: ""
        googleGroup: ""
        serviceAccountJson: ""
        existingSecret: ""
      ## Custom configuration file: oauth2_proxy.cfg
      ## content: |
      ##   pass_basic_auth = false
      ##   pass_access_token = true
      ##
      ## @param configuration.content [string] Default configuration
      ##
      content: |
        email_domains = [ "*" ]
        upstreams = [ "file:///dev/null" ]

      ## @param configuration.existingConfigmap Configmap with the OAuth2 Proxy configuration
      ##
      existingConfigmap: ""
      ## Authorize individual email addresses
      ## @param configuration.authenticatedEmailsFile.enabled Enable authenticated emails file
      ## @param configuration.authenticatedEmailsFile.content Restricted access list (one email per line)
      ## @param configuration.authenticatedEmailsFile.existingSecret Secret with the authenticated emails file
      ##
      authenticatedEmailsFile:
        enabled: false
        ## One email per line
        ## e.g:
        ## content: |-
        ##   name1@domain
        ##   name2@domain
        ## If you override the config with restricted_access it will configure a user list within this chart what takes care of the configmap
        ##
        content: ""
        existingSecret: ""

      ## Additionally authenticate against a htpasswd file. Entries must be created with "htpasswd -s" for SHA encryption
      ## @param configuration.htpasswdFile.enabled Enable htpasswd file
      ## @param configuration.htpasswdFile.existingSecret Existing secret for htpasswd file
      ## @param configuration.htpasswdFile.content htpasswd file entries (one row per user)
      ##
      htpasswdFile:
        enabled: false
        ## Alternatively supply an existing secret which contains the required information
        ##
        existingSecret: ""
        ## One row for each user
        ## e.g:
        ## entries: |
        ##    testuser:{SHA}EWhzdhgoYJWy0z2gyzhRYlN9DSiv
        ##
        content: ""

      ## @param configuration.oidcIssuerUrl OpenID Connect issuer URL
      oidcIssuerUrl: ""

      ## @param configuration.redirectUrl OAuth Redirect URL
      redirectUrl: ""

      ## @param configuration.whiteList Allowed domains for redirection after authentication. Prefix domain with a . or a *. to allow subdomains
      whiteList: ""

    ## @section OAuth2 Proxy deployment parameters
    ##

    ## @param containerPort OAuth2 Proxy port number
    ##
    containerPort: 4180

    redis:
      ## @param redis.enabled Deploy Redis&reg; sub-chart
      ##
      enabled: true
      ## @param redis.architecture Redis&reg; architecture
      ##
      architecture: "standalone"
      master:
        ## @param redis.master.service.port Redis&reg; (without Sentinel) service port
        ##
        service:
          port: 6379
      replica:
        ## @param redis.replica.replicaCount Number of Redis&reg; replicas
        ##
        replicaCount: 3
      auth:
        ## @param redis.auth.enabled Enable Redis&reg; authentication
        ##
        enabled: true
        ## @param redis.auth.existingSecret Secret with Redis&reg; credentials
        ##
        existingSecret: ""
        ## @param redis.auth.existingSecretPasswordKey Key inside the existing secret with Redis&reg; credentials
        ##
        existingSecretPasswordKey: ""
        ## @param redis.auth.sentinel Enable authentication in the Sentinel nodes
        ##
        sentinel: true
